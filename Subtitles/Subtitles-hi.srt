1
00:00:34,133 --> 00:00:41,266
स्वचालित गणना की उम्र 1623 में शुरू होती है,

2
00:00:41,266 --> 00:00:45,000
जब विल्हेम स्किकार्ड ने अपनी लकड़ी की गणना मशीन को पूरा किया।

3
00:00:45,600 --> 00:00:51,100
यह मशीन गियर का उपयोग करती है और दशमलव प्रणाली में काम करती है।

4
00:00:51,700 --> 00:00:56,333
दो गियर दो अंकों की संख्या का प्रतिनिधित्व कर सकते हैं।

5
00:00:57,066 --> 00:01:01,100
जोड़ के दौरान कैरी की हैंडलिंग को

6
00:01:01,500 --> 00:01:04,400
पिन और दूसरे गियर व्हील की मदद से महसूस किया जाता है।

7
00:01:04,566 --> 00:01:06,900
यह इस तरह से होता है...

8
00:01:08,066 --> 00:01:10,700
दहाई "एक" को आगे ले जाती है और...

9
00:01:11,900 --> 00:01:14,266
"दो" को आगे ले जाती है...

10
00:01:15,533 --> 00:01:17,566
और...

11
00:01:17,700 --> 00:01:21,433
"तीन" आगे ले जाने पर कुल 30 बनता है!

12
00:01:22,900 --> 00:01:25,466
जैसा कि आप देख सकते हैं,

13
00:01:25,500 --> 00:01:28,433
दशमलव प्रणाली में जोड़ने के लिए गियर वास्तव में बहुत अच्छे हैं।

14
00:01:29,600 --> 00:01:33,466
हालाँकि, आज के सभी कंप्यूटर बाइनरी सिस्टम में काम करते हैं,

15
00:01:34,133 --> 00:01:38,366
जिसे Schickard के आविष्कार के लगभग 75 साल बाद

16
00:01:38,366 --> 00:01:42,400
, 17 वीं शताब्दी के अंत में Gottfried Wilhelm Leibniz द्वारा

17
00:01:43,200 --> 00:01:45,900
प्रलेखित किया गया था

18
00:01:46,266 --> 00:01:50,166
। एक उदाहरण के रूप में, हेर लीबनिज़ अब हमें दिखाते हैं कि

19
00:01:51,000 --> 00:01:57,266
अपने बाइनरी सिस्टम में 3 + 1 की गणना कैसे करें। 3 को 1 * 2^1 + 1 * 2^0, यानी

20
00:01:57,833 --> 00:02:01,766
1 * 2 + 1 * 1 के रूप में दर्शाया गया है।

21
00:02:02,066 --> 00:02:07,833
1 0 * 2 + 1 * 1 के अनुरूप है।

22
00:02:08,566 --> 00:02:12,633
हम दो संख्याओं को एक के नीचे एक लिखकर योग बनाते हैं।

23
00:02:13,633 --> 00:02:17,966
जैसे हमने स्कूल में दशमलव प्रणाली के लिए सीखा।

24
00:02:19,200 --> 00:02:24,700
तो 1 + 1 = 0 ... 1 नोट किया गया!

25
00:02:25,433 --> 00:02:30,666
1 + (याद किया गया) 1 = 0 और फिर से 1 याद आया!

26
00:02:31,100 --> 00:02:36,366
अंत में, 0 + 1 = 1...

27
00:02:36,366 --> 00:02:41,800
तो योग 2 * 2^2 या 1 * 4,

28
00:02:42,200 --> 00:02:45,933
या सिर्फ चार दशमलव है!

29
00:02:46,966 --> 00:02:50,800
कैलकुलेशन में हमने देखा कि हमें

30
00:02:51,100 --> 00:02:56,533
कैरी को नीचे से ऊपर वाले अंक में दो बार खाते में लेना था।

31
00:02:57,066 --> 00:03:00,300
हम इस अवधारणा को निम्नलिखित में कई बार सामना करेंगे।

32
00:03:00,900 --> 00:03:04,000
तो अब हम ज्ञात ब्रह्मांड में पहले बाइनरी कैलकुलेटर के साथ

33
00:03:04,000 --> 00:03:10,166
प्रौद्योगिकी की आधुनिक दुनिया में आते हैं

34
00:03:10,366 --> 00:03:13,500
, जिसका नाम Z1 है! कोनराड ज़्यूस ने

35
00:03:13,866 --> 00:03:18,933
1937 में धातु की शीट के हज़ारों पुर्जों से अपने काम को इकट्ठा किया।

36
00:03:19,500 --> 00:03:23,800
यहां हम बर्लिन में टेक्निकम्यूजियम से प्रतिकृति देखते हैं।

37
00:03:24,800 --> 00:03:29,666
यह खंड, उदाहरण के लिए, अंकगणितीय इकाई को जोड़ने वाली इकाई के साथ लागू करता है।

38
00:03:30,300 --> 00:03:34,300
व्यक्तिगत तत्वों की भीड़ को देखते हुए, यह

39
00:03:34,533 --> 00:03:38,233
समझना लगभग असंभव लगता है कि यह चमत्कार अपने मूल में कैसे काम करता है।

40
00:03:38,600 --> 00:03:41,933
सौभाग्य से, हालांकि, ह्यूनफेल्ड में ज़्यूस संग्रहालय में

41
00:03:41,933 --> 00:03:47,766
एक मॉडल है जो अंतर्निहित सिद्धांतों को स्पष्ट रूप से दिखाता है।

42
00:03:48,833 --> 00:03:54,400
योजक फ़ंक्शन को लागू करने के लिए, ज़्यूस ने तीन प्रकार के घटकों का उपयोग किया,

43
00:03:54,400 --> 00:03:55,633
अर्थात् ...

44
00:03:55,633 --> 00:03:58,233
और और एक्सओआर गेट्स,

45
00:03:58,433 --> 00:04:01,200
साथ ही सरल स्विच तत्व।

46
00:04:02,033 --> 00:04:05,433
मॉडल काफी हद तक ऐडर सर्किट जैसा ही है

47
00:04:05,433 --> 00:04:10,100
जिसे कोनराड ज़्यूस ने खुद बनाया था।

48
00:04:15,166 --> 00:04:17,700
निम्नलिखित में, इसलिए हम सबसे पहले

49
00:04:17,700 --> 00:04:22,466
इन तीन मूल तत्वों की संरचना का वर्णन करेंगे, जिसकी शुरुआत AND गेट से होगी।

50
00:04:22,933 --> 00:04:31,166
इसमें दो इनपुट ए और बी हैं और एक आउटपुट जो परिणाम का प्रतिनिधित्व करता है।

51
00:04:31,500 --> 00:04:37,533
AND ऑपरेशन के लिए सत्य तालिका प्रत्येक संभावित A और B के परिणाम को परिभाषित करती है।

52
00:04:37,800 --> 00:04:43,133
केवल जब A और B एक होते हैं तो आउटपुट भी एक होता है।

53
00:04:43,533 --> 00:04:48,733
अन्य सभी मामलों के लिए हमें शून्य मिलता है।

54
00:04:48,900 --> 00:04:56,833
आइए एक नज़र डालते हैं कि कोनराड ज़्यूस ने अपने शीट धातु के पुर्जों का उपयोग करके इस ऑपरेशन को कैसे लागू किया।

55
00:04:57,700 --> 00:05:01,533
ओरिएंटेशन न खोने के लिए, हम

56
00:05:01,533 --> 00:05:06,466
हनफेल्ड मॉडल के समान क्षैतिज और लंबवत संरेखण का उपयोग करते हैं।

57
00:05:07,700 --> 00:05:12,300
प्लेट ए और बी इनपुट के लिए उपयोग किए जाते हैं,

58
00:05:12,700 --> 00:05:16,400
जो क्रमशः दाएं और बाएं स्थानांतरित हो सकते हैं ...

59
00:05:16,833 --> 00:05:23,166
और इस प्रकार एक या शून्य को समायोज्य बनाते हैं।

60
00:05:24,000 --> 00:05:30,400
परिणाम के लिए आउटपुट शीट होती है, जिसे लंबवत दिशा में ले जाया जाता है

61
00:05:30,733 --> 00:05:35,700
और परिणाम शून्य और एक का प्रतिनिधित्व कर सकता है।

62
00:05:37,133 --> 00:05:43,433
वास्तविक लिंकिंग लॉजिक को तथाकथित कपलिंग प्लेट के माध्यम से लागू किया जाता है,

63
00:05:43,733 --> 00:05:47,466
जिसमें AND ऑपरेशन के लिए विशेष कटआउट होते हैं

64
00:05:47,733 --> 00:05:52,133
और एक ऊर्ध्वाधर दिशा में भी चलते हैं।

65
00:05:54,166 --> 00:05:58,000
तीन शीटों को फिर एक दूसरे के ऊपर ढेर कर दिया जाता है

66
00:05:58,233 --> 00:06:01,700
और दो स्विचिंग पिनों द्वारा एक दूसरे से जोड़ा जाता है।

67
00:06:02,566 --> 00:06:06,200
हम क्षैतिज रूप से युग्मित पिनों का उपयोग करके

68
00:06:06,466 --> 00:06:10,166
विस्फोटित ड्राइंग में समान प्रभाव प्राप्त करते हैं

69
00:06:10,766 --> 00:06:16,033
। जो अभी भी गायब है वह एंड सर्किट को ट्रिगर करने के लिए एक तंत्र है।

70
00:06:16,600 --> 00:06:20,400
इसके लिए, कोनराड ज़्यूस ने इंडेक्सिंग प्लेट प्रदान की,

71
00:06:20,766 --> 00:06:26,300
जो आउटपुट प्लेट की तरह लंबवत रूप से चल सकती है।

72
00:06:27,733 --> 00:06:31,100
अब हम जांचते हैं कि सर्किट सही तरीके से काम कर रहा है या नहीं

73
00:06:31,466 --> 00:06:35,533
और सत्य तालिका की पहली पंक्ति से शुरू करें।

74
00:06:35,866 --> 00:06:40,666
इनपुट के रूप में हम A के लिए शून्य और B के लिए शून्य का उपयोग करते हैं।

75
00:06:41,433 --> 00:06:45,100
फिर घड़ी की नब्ज चालू हो जाती है।

76
00:06:45,600 --> 00:06:50,566
क्योंकि ऊपरी युग्मन नहीं होता है, आउटपुट शीट भी

77
00:06:50,566 --> 00:06:55,233
अपनी मूल स्थिति में रहती है और परिणाम शून्य होता है।

78
00:06:55,766 --> 00:06:58,666
अब दूसरी पंक्ति...

79
00:06:59,633 --> 00:07:02,766
शून्य और...

80
00:07:02,766 --> 00:07:04,333
एक...

81
00:07:04,433 --> 00:07:08,500
फिर से शून्य है

82
00:07:09,066 --> 00:07:13,466
क्योंकि ऊपरी युग्मन फिर से सक्रिय नहीं होता है।

83
00:07:14,433 --> 00:07:17,366
अब तीसरी पंक्ति के लिए...

84
00:07:18,133 --> 00:07:24,133
हम इनपुट A को एक और B को शून्य पर सेट करते हैं।

85
00:07:24,966 --> 00:07:29,533
इस बार क्लॉक पल्स कपलिंग प्लेट को घुमाती है।

86
00:07:29,966 --> 00:07:37,933
हालाँकि, क्योंकि निचला युग्मन नहीं होता है, आउटपुट शीट फिर से शून्य पर रहती है।

87
00:07:38,933 --> 00:07:43,166
अंत में, हम तालिका की अंतिम पंक्ति का परीक्षण करते हैं

88
00:07:43,600 --> 00:07:46,833
और इनपुट ए

89
00:07:48,500 --> 00:07:53,200
और बी दोनों को एक पर सेट करते हैं।

90
00:07:54,400 --> 00:08:02,300
आउटपुट प्लेट को अब घड़ी द्वारा स्थानांतरित कर दिया गया है क्योंकि ऊपरी

91
00:08:02,466 --> 00:08:08,900
और निचले दोनों युग्मन होते हैं और परिणाम एक होता है।

92
00:08:10,600 --> 00:08:14,433
इसलिए हमने AND गेट को पूरी तरह से सत्यापित कर लिया है

93
00:08:14,433 --> 00:08:18,433
और इसके बाद हम XOR गेट को देखते हैं।

94
00:08:18,833 --> 00:08:22,033
ऐसा करने के लिए, हमें पहले AND गेट को भंग करना होगा,

95
00:08:22,233 --> 00:08:25,833
फिर कपलिंग प्लेट को हटाना होगा और

96
00:08:25,833 --> 00:08:29,233
अंत में इसे दो नई प्लेटों से बदलना होगा

97
00:08:29,333 --> 00:08:33,100
जिनमें XOR ऑपरेशन के लिए सही कटआउट हों।

98
00:08:33,866 --> 00:08:40,066
इसके बाद चादरें स्विच पिन और वॉइला द्वारा फिर से जोड़ दी जाती हैं...

99
00:08:40,200 --> 00:08:44,366
हमारा विशेष OR गेट पूरी तरह से असेंबल किया गया है!

100
00:08:44,633 --> 00:08:48,200
सत्य तालिका इस बार इस तरह दिखती है:

101
00:08:48,400 --> 00:08:54,600
यदि ए और बी बराबर हैं, तो परिणाम शून्य है।

102
00:08:54,600 --> 00:09:00,200
यदि A और B बराबर नहीं हैं, तो XOR ऑपरेशन का परिणाम एक होता है।

103
00:09:00,766 --> 00:09:03,600
तो वापस हमारे सर्किट का परीक्षण करने के लिए ...

104
00:09:04,566 --> 00:09:08,266
शून्य XOR शून्य

105
00:09:08,700 --> 00:09:13,600
शून्य के बराबर है!

106
00:09:17,100 --> 00:09:22,600
शून्य XOR एक

107
00:09:22,800 --> 00:09:26,400
एक के बराबर है।

108
00:09:27,300 --> 00:09:30,000
अब आपने देखा है कि यदि ए और बी बराबर नहीं हैं तो दाहिनी

109
00:09:30,000 --> 00:09:35,166
शीट युग्मन पर ले जाती है।

110
00:09:38,566 --> 00:09:40,366
और यह जारी रहता है...

111
00:09:40,366 --> 00:09:45,133
एक XOR शून्य भी

112
00:09:46,466 --> 00:09:47,600
एक

113
00:09:48,400 --> 00:09:51,033
के बराबर होता है ।

114
00:09:51,033 --> 00:09:54,900
इस बार लेफ्ट शीट कपलिंग को संभाल लेती है।

115
00:09:55,733 --> 00:09:57,666
जो कुछ बचता है वह है...

116
00:10:00,100 --> 00:10:05,533
एक एक्सओआर वन,

117
00:10:06,466 --> 00:10:09,966
जो फिर शून्य के बराबर होता है।

118
00:10:10,800 --> 00:10:15,200
अब जब हमने तार्किक संचालन AND और XOR को लागू कर दिया है, तो

119
00:10:15,466 --> 00:10:18,033
हम अभी भी साधारण स्विच को याद कर रहे हैं।

120
00:10:18,466 --> 00:10:23,066
इसमें एक टाइमिंग और एक आउटपुट ट्रे होती है,

121
00:10:23,066 --> 00:10:28,533
जो दोनों क्षैतिज रूप से चल सकती हैं, और एक इनपुट ट्रे,

122
00:10:28,533 --> 00:10:31,200
जो लंबवत रूप से संरेखित होती है।

123
00:10:31,966 --> 00:10:36,533
सभी तीन शीट बेशक एक स्विच पिन के साथ फिर से जुड़ी हुई हैं।

124
00:10:36,900 --> 00:10:43,466
निष्क्रिय अवस्था में, घड़ी और आउटपुट शीट को युग्मित नहीं किया जाता है और तदनुसार

125
00:10:43,466 --> 00:10:46,200
पल्स को स्विच नहीं किया जाता है।

126
00:10:46,700 --> 00:10:49,466
यदि स्विच सक्रिय है, तो

127
00:10:50,033 --> 00:10:53,800
घड़ी की नाड़ी अग्रेषित की जाती है।

128
00:10:55,066 --> 00:10:58,366
वर्णित तीन स्विचिंग तत्वों के साथ, अब हमारे पास

129
00:10:58,366 --> 00:11:02,733
हुनफेल्ड अतिरिक्त मॉडल के लिए सभी सामग्रियां हैं।

130
00:11:02,733 --> 00:11:06,900
निम्नलिखित में अब हम चरणबद्ध तरीके से समझाते हैं कि कैसे योजक का निर्माण किया जाता है।

131
00:11:07,200 --> 00:11:13,466
हम इसके लिए ऊपर दाईं ओर से शुरू करते हैं, जहां AND और XOR गेट स्थापित हैं।

132
00:11:13,466 --> 00:11:19,400
सर्किट में दो इनपुट होते हैं, अर्थात् A1 और B1।

133
00:11:20,100 --> 00:11:28,600
फिर दो आउटपुट हैं, अर्थात् राशि के परिणाम के लिए R और कैरी के लिए U।

134
00:11:29,100 --> 00:11:33,200
फाटकों को पहली घड़ी की थाली के माध्यम से सक्रिय किया जाता है।

135
00:11:34,066 --> 00:11:40,033
और यहाँ फिर से सर्किट के लिए सत्य तालिका, जिसे आजकल,

136
00:11:40,300 --> 00:11:43,000
आधा योजक कहा जाता है।

137
00:11:43,000 --> 00:11:48,133
इसलिए इस घटक के दो इनपुट हैं,

138
00:11:48,133 --> 00:11:51,033
पहला योग A1

139
00:11:51,633 --> 00:11:54,733
और दूसरा योग B1।

140
00:11:55,333 --> 00:11:58,166
फिर हमारे पास दो आउटपुट हैं,

141
00:11:58,166 --> 00:12:04,300
अर्थात् आर और कैरी यू।

142
00:12:05,000 --> 00:12:08,366
इसके बाद हम सर्किट का परीक्षण करते हैं ...

143
00:12:09,633 --> 00:12:12,200
शून्य प्लस शून्य शून्य

144
00:12:12,700 --> 00:12:14,533
के बराबर है

145
00:12:16,800 --> 00:12:18,466
!

146
00:12:18,600 --> 00:12:21,466
और कैरी भी जीरो है।

147
00:12:22,133 --> 00:12:27,266
AND और XOR दोनों क्लॉक पल्स पास नहीं करते हैं।

148
00:12:29,000 --> 00:12:35,000
दूसरी पंक्ति में हम A1 को शून्य

149
00:12:35,466 --> 00:12:39,600
और B1 को एक पर सेट करते हैं।

150
00:12:40,300 --> 00:12:43,600
यह XOR गेट को सक्रिय करता है

151
00:12:44,000 --> 00:12:45,700
और घड़ी को

152
00:12:45,700 --> 00:12:47,833
स्विच किया जाता है।

153
00:12:48,966 --> 00:12:52,933
परिणाम एक है और कैरी

154
00:12:52,933 --> 00:12:55,633
शून्य पर रहता है।

155
00:12:56,000 --> 00:12:57,900
एक प्लस शून्य

156
00:12:59,366 --> 00:13:03,433
पर भी यही बात लागू होती है

157
00:13:04,466 --> 00:13:06,700
। आइए

158
00:13:06,900 --> 00:13:10,366
सत्य तालिका की अंतिम पंक्ति देखें।

159
00:13:12,600 --> 00:13:15,333
एक और

160
00:13:16,666 --> 00:13:18,333
एक

161
00:13:18,400 --> 00:13:21,333
इस बार AND गेट को सक्रिय करते हैं

162
00:13:22,000 --> 00:13:24,266
और घड़ी

163
00:13:24,466 --> 00:13:27,366
कैरी को सेट करने का कारण बनती है।

164
00:13:28,966 --> 00:13:31,733
योग शून्य रहता है।

165
00:13:36,733 --> 00:13:39,733
तो हमारा आधा योजक काम कर रहा है।

166
00:13:40,200 --> 00:13:44,333
वह एक बाइनरी अंक को सही ढंग से जोड़ सकता है और कैरी का निर्धारण कर सकता है।

167
00:13:44,700 --> 00:13:48,766
बाइनरी संख्या के अंतिम अंक के लिए सर्किट पहले से ही पर्याप्त होगा।

168
00:13:49,200 --> 00:13:55,300
हालाँकि, अंतिम स्थिति से, पिछले जोड़ के वहन को अभी भी ध्यान में रखा जाना चाहिए।

169
00:13:55,733 --> 00:14:00,633
इसे प्राप्त करने के लिए, हमें सर्किट को थोड़ा विस्तारित करने की आवश्यकता है।

170
00:14:01,500 --> 00:14:04,633
यहाँ फिर से योग A1 और B1 के साथ

171
00:14:04,633 --> 00:14:09,266
हमारे आधे योजक का तार्किक प्रतिनिधित्व है

172
00:14:09,466 --> 00:14:14,433
और परिणामस्वरूप योग R और U को ले जाता है।

173
00:14:14,766 --> 00:14:22,166
A1 और B1 के अलावा अब हमें तीसरे इनपुट के रूप में कैरी U1 मिलता है,

174
00:14:22,733 --> 00:14:26,466
जो इसके अतिरिक्त से आता है पिछला अंक।

175
00:14:26,700 --> 00:14:32,566
नई राशि R1 और नई कैरी U2 की

176
00:14:32,566 --> 00:14:38,400
गणना अतिरिक्त तर्क का उपयोग करके A1, B1 और U1 से की जानी चाहिए

177
00:14:38,600 --> 00:14:43,333
। ट्रूथ टेबल में अब एक और कॉलम है।

178
00:14:43,633 --> 00:14:48,266
वैसे, अब हम

179
00:14:48,633 --> 00:14:54,300
"पूर्ण योजक" के संक्षिप्त नाम FA के साथ एक तथाकथित पूर्ण योजक बनाने की प्रक्रिया में हैं।

180
00:14:55,366 --> 00:14:58,200
सबसे पहले, आइए

181
00:14:58,200 --> 00:15:03,700
योग R1 की गणना देखें, जो एक हो जाता है जब भी एक इनपुट

182
00:15:03,700 --> 00:15:09,033
A1, B1 या U1 सेट किया जाता है, या तीनों एक साथ।

183
00:15:09,300 --> 00:15:12,833
यह व्यवहार एक अन्य XOR तत्व के साथ प्राप्त किया जा सकता है,

184
00:15:13,200 --> 00:15:19,166
जिसमें हम कैरी U1 और पहले XOR ऑपरेशन के परिणाम को फीड करते हैं।

185
00:15:19,166 --> 00:15:25,533
ऊपरी एक्सओआर गेट स्विच करता है जब भी ए 1 या बी 1 सेट होता है।

186
00:15:25,833 --> 00:15:34,300
U1 के लिए शून्य के बराबर, दूसरा XOR तब स्विच करता है और अंतिम परिणाम एक होता है।

187
00:15:34,466 --> 00:15:39,900
यदि A1 और B1 शून्य हैं और U1 सेट है, तो

188
00:15:40,200 --> 00:15:45,366
निचला XOR भी स्विच करता है और परिणाम फिर से एक होता है।

189
00:15:46,300 --> 00:15:50,800
अब सवाल यह उठता है कि पहले XOR गेट से सूचना

190
00:15:51,166 --> 00:15:53,966
यांत्रिक रूप से दूसरे में कैसे जा सकती है।

191
00:15:54,200 --> 00:15:58,000
आखिरकार, आवेग को किसी तरह कोने के आसपास आना पड़ता है।

192
00:15:58,466 --> 00:16:03,566
यह उपलब्धि दूसरी कील प्लेट और एक स्विच द्वारा हासिल की जाती है।

193
00:16:04,100 --> 00:16:07,000
आइए प्रदर्शित करें कि यह सिद्धांत रूप में कैसे काम करता है

194
00:16:07,000 --> 00:16:11,533
और सत्य तालिका की तीसरी पंक्ति लें:

195
00:16:11,533 --> 00:16:18,600
शून्य प्लस वन XOR गेट को सक्रिय करता है।

196
00:16:19,600 --> 00:16:23,266
फिर पहली बीट चालू हो जाती है

197
00:16:23,633 --> 00:16:26,233
और स्विच फ़्लिप हो जाता है।

198
00:16:27,000 --> 00:16:30,633
चक्र 2 में, पहले XOR से सूचना को

199
00:16:30,633 --> 00:16:37,800
स्विच के माध्यम से दूसरे XOR में स्थानांतरित किया जाता है और इसे सक्रिय किया जाता है।

200
00:16:38,866 --> 00:16:41,400
आवेग कोने के चारों ओर बह गया।

201
00:16:41,766 --> 00:16:49,233
अब हमें दूसरे XOR गेट को ट्रिगर करने

202
00:16:49,466 --> 00:16:53,300
और सही परिणाम की गणना करने के लिए तीसरी बार की आवश्यकता है।

203
00:16:54,000 --> 00:16:59,900
अब जबकि हम परिणाम R1 की गणना कर सकते हैं, कैरी U2 अभी भी गायब है।

204
00:17:00,533 --> 00:17:08,933
यदि A1 और B1 दोनों सेट हैं, तो यह एक लौटाता है, जो तब AND गेट को सक्रिय करता है। इस मामले में,

205
00:17:09,833 --> 00:17:12,466
बार 2 से स्विच की मदद से

206
00:17:12,466 --> 00:17:17,133
सूचना को फिर से कोने के चारों ओर धकेल दिया जाता है

207
00:17:17,833 --> 00:17:22,933
। ऐसे मामले जहां A1 या B1 सेट हैं,

208
00:17:23,400 --> 00:17:26,266
जो ऊपरी XOR को सक्रिय करते हैं, अभी भी गायब हैं।

209
00:17:26,700 --> 00:17:31,700
इसके अलावा, पिछली स्थिति से कैरी U1 है।

210
00:17:32,433 --> 00:17:36,433
दूसरे स्विच की मदद से ऊपरी XOR सूचना को U1 से U2 में

211
00:17:36,733 --> 00:17:41,700
स्थानांतरित करके कैरी को अग्रेषित करना आसानी से महसूस किया जाता है

212
00:17:41,700 --> 00:17:47,166
, जो निश्चित रूप से क्लॉक प्लेट 2 फिर से ले लेता है।

213
00:17:47,733 --> 00:17:52,700
इस प्रकार, हमारा पूरा योजक पूरा हो गया है और अब

214
00:17:52,700 --> 00:17:57,133
सैद्धांतिक रूप से किसी योजक में कितनी भी जगहों के लिए मूल तत्व के रूप में काम कर सकता है।

215
00:17:58,500 --> 00:18:01,933
हुनफेल्ड मॉडल दो बाइनरी अंकों का उपयोग करता है।

216
00:18:02,166 --> 00:18:07,633
तो आइए एक बार अपने पूरे ऐडर को कॉपी करें और लेबल एडजस्ट करें।

217
00:18:08,500 --> 00:18:14,166
फिर हम ट्रांसफर प्लेट U2 का उपयोग करके दो भागों को जोड़ते हैं।

218
00:18:14,600 --> 00:18:19,200
और हमारा 2-बिट योजक निम्नलिखित सत्य तालिका के साथ पूर्ण है:

219
00:18:19,633 --> 00:18:23,433
आइए पहले बिना कैरी के एक उदाहरण की गणना करें।

220
00:18:23,733 --> 00:18:31,166
टू प्लस वन कैसा रहेगा?

221
00:18:31,433 --> 00:18:34,766
इनपुट दो XOR गेट्स को ट्रिगर करता है।

222
00:18:35,000 --> 00:18:39,966
फिर बार 1 चार स्विच को सक्रिय करता है।

223
00:18:40,333 --> 00:18:44,566
बार 2 कोने के चारों ओर XOR सूचना को धकेलता है

224
00:18:44,733 --> 00:18:48,233
और निचले XOR द्वारों को सक्रिय करता है।

225
00:18:48,600 --> 00:18:52,533
अंत में, तीसरी पट्टी परिणाम का मूल्यांकन करती है,

226
00:18:52,800 --> 00:18:59,033
जो अपेक्षित रूप से बाइनरी में 001 या दशमलव में तीन है।

227
00:18:59,633 --> 00:19:03,200
इस मामले में, कैरी चेन का अभी तक उपयोग नहीं किया गया है।

228
00:19:03,600 --> 00:19:09,866
तो अंत में हम शुरुआत से उदाहरण को आगे ले जाने के साथ करते हैं, इसलिए...

229
00:19:11,333 --> 00:19:12,433
तीन

230
00:19:13,100 --> 00:19:14,100
जमा

231
00:19:15,233 --> 00:19:16,533
एक।

232
00:19:16,766 --> 00:19:23,000
इनपुट पहले XOR और दूसरे AND गेट को सक्रिय करता है।

233
00:19:23,600 --> 00:19:29,333
क्लॉक 1 कैरी चेन के लिए स्विच को ट्रिगर करता है,

234
00:19:29,333 --> 00:19:35,733
साथ ही कैरी U2 को दूसरे स्थान के साथ गणना करने के लिए स्विच करता है।

235
00:19:36,000 --> 00:19:40,700
बार 2 कैरी को U3 में शिफ्ट करता है।

236
00:19:40,866 --> 00:19:45,700
और बार 3 का कोई और प्रभाव नहीं है।

237
00:19:45,933 --> 00:19:53,233
परिणाम सही ढंग से बाइनरी 100 या दशमलव चार है।

238
00:19:54,300 --> 00:19:55,200
पूर्ण!

239
00:19:55,966 --> 00:20:00,000
Konrad Zuse ने वास्तव में एक बहुत ही सरल चीज़ डिज़ाइन की है:

240
00:20:00,533 --> 00:20:04,966
दुनिया का पहला बाइनरी योजक!

241
00:20:05,700 --> 00:20:07,033
उनके सहयोगी

242
00:20:07,033 --> 00:20:08,766
विल्हेम स्किकार्ड और...

243
00:20:08,766 --> 00:20:10,766
Gottfried Wilhelm Leibniz

244
00:20:10,766 --> 00:20:17,666
नि:संदेह जोरदार तालियां बजाएंगे!

