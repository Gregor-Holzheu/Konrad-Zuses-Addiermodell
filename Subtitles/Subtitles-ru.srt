1
00:00:34,133 --> 00:00:41,266
Эпоха автоматических вычислений начинается в 1623 году,

2
00:00:41,266 --> 00:00:45,000
когда Вильгельм Шикард завершает свою деревянную счетную машину.

3
00:00:45,600 --> 00:00:51,100
Эта машина использует шестерни и работает в десятичной системе.

4
00:00:51,700 --> 00:00:56,333
Две шестерни могут представлять собой двузначное число.

5
00:00:57,066 --> 00:01:01,100
Управление переноской при сложении осуществляется

6
00:01:01,500 --> 00:01:04,400
с помощью штифтов и еще одного зубчатого колеса.

7
00:01:04,566 --> 00:01:06,900
Это происходит так...

8
00:01:08,066 --> 00:01:10,700
Десятки Перенести "Один" и...

9
00:01:11,900 --> 00:01:14,266
Перенести "Два"...

10
00:01:15,533 --> 00:01:17,566
И...

11
00:01:17,700 --> 00:01:21,433
Перенести "Три" в сумме 30!

12
00:01:22,900 --> 00:01:25,466
Как видите, шестеренки действительно

13
00:01:25,500 --> 00:01:28,433
отлично подходят для сложения в десятичной системе.

14
00:01:29,600 --> 00:01:33,466
Однако все современные компьютеры работают в двоичной системе, которая

15
00:01:34,133 --> 00:01:38,366
была задокументирована Готфридом Вильгельмом Лейбницем в конце 17 века,

16
00:01:38,366 --> 00:01:42,400
примерно через 75 лет после изобретения Шикарда.

17
00:01:43,200 --> 00:01:45,900
В качестве примера г-н Лейбниц теперь показывает нам, как

18
00:01:46,266 --> 00:01:50,166
вычислить 3 + 1 в своей двоичной системе.

19
00:01:51,000 --> 00:01:57,266
Число 3 представлено как 1 * 2 ^ 1 + 1 * 2 ^ 0, то есть

20
00:01:57,833 --> 00:02:01,766
1 * 2 + 1 * 1.

21
00:02:02,066 --> 00:02:07,833
1 соответствует 0 * 2 + 1 * 1.

22
00:02:08,566 --> 00:02:12,633
Мы формируем сумму, записывая два числа одно под другим.

23
00:02:13,633 --> 00:02:17,966
Так же, как мы учили в школе десятичную систему.

24
00:02:19,200 --> 00:02:24,700
Таким образом, 1 + 1 = 0 ... 1 отмечено!

25
00:02:25,433 --> 00:02:30,666
1 + (вспомнил) 1 = 0 И снова 1 вспомнил!

26
00:02:31,100 --> 00:02:36,366
Наконец, 0 + 1 = 1...

27
00:02:36,366 --> 00:02:41,800
Таким образом, сумма равна 2 * 2 ^ 2 или 1 * 4,

28
00:02:42,200 --> 00:02:45,933
или просто десятичной четверке!

29
00:02:46,966 --> 00:02:50,800
При расчете мы увидели, что нам

30
00:02:51,100 --> 00:02:56,533
пришлось дважды учитывать перенос от младшего разряда к старшему.

31
00:02:57,066 --> 00:03:00,300
Мы встретимся с этим понятием несколько раз в дальнейшем.

32
00:03:00,900 --> 00:03:04,000
Итак, теперь мы подошли к современному миру технологий

33
00:03:04,000 --> 00:03:10,166
с первым двоичным калькулятором в известной вселенной, а именно Z1!

34
00:03:10,366 --> 00:03:13,500
Конрад Цузе собрал свою работу

35
00:03:13,866 --> 00:03:18,933
в 1937 году из тысяч деталей из листового металла.

36
00:03:19,500 --> 00:03:23,800
Здесь мы видим реплику из Technikmuseum в Берлине.

37
00:03:24,800 --> 00:03:29,666
Этот раздел здесь, например, реализует арифметический блок с блоком сложения.

38
00:03:30,300 --> 00:03:34,300
Учитывая множество отдельных элементов, кажется почти невозможным

39
00:03:34,533 --> 00:03:38,233
понять, как это чудо должно работать в своей основе.

40
00:03:38,600 --> 00:03:41,933
Однако, к счастью, в музее Цузе в Хюнфельде есть

41
00:03:41,933 --> 00:03:47,766
модель, которая ясно показывает основные принципы.

42
00:03:48,833 --> 00:03:54,400
Для реализации функции сумматора Цузе использовал три типа компонентов,

43
00:03:54,400 --> 00:03:55,633
а именно…

44
00:03:55,633 --> 00:03:58,233
логические элементы AND и XOR,

45
00:03:58,433 --> 00:04:01,200
а также простые переключающие элементы.

46
00:04:02,033 --> 00:04:05,433
Модель почти такая же, как схема сумматора

47
00:04:05,433 --> 00:04:10,100
, которую нарисовал сам Конрад Цузе.

48
00:04:15,166 --> 00:04:17,700
Поэтому в дальнейшем мы сначала опишем структуру

49
00:04:17,700 --> 00:04:22,466
этих трех основных элементов, начиная с логического элемента И.

50
00:04:22,933 --> 00:04:31,166
У него есть два входа A и B и выход, который представляет результат.

51
00:04:31,500 --> 00:04:37,533
Таблица истинности для операции AND определяет результат для всех возможных A и B.

52
00:04:37,800 --> 00:04:43,133
Только когда A и B едины, выход также един.

53
00:04:43,533 --> 00:04:48,733
Во всех остальных случаях получаем ноль.

54
00:04:48,900 --> 00:04:56,833
Давайте посмотрим, как Конрад Цузе реализовал эту операцию, используя свои детали из листового металла.

55
00:04:57,700 --> 00:05:01,533
Чтобы не потерять ориентацию, используем такое же

56
00:05:01,533 --> 00:05:06,466
горизонтальное и вертикальное выравнивание, как и в модели Хюнфельда.

57
00:05:07,700 --> 00:05:12,300
Для ввода используются пластины A и B,

58
00:05:12,700 --> 00:05:16,400
которые могут перемещаться вправо и влево соответственно...

59
00:05:16,833 --> 00:05:23,166
И, таким образом, сделать единицу или ноль регулируемыми.

60
00:05:24,000 --> 00:05:30,400
Для результата есть выходной лист, который перемещается в вертикальном направлении

61
00:05:30,733 --> 00:05:35,700
, и результат может представлять собой ноль и единицу.

62
00:05:37,133 --> 00:05:43,433
Фактическая логика соединения реализуется через так называемую соединительную пластину,

63
00:05:43,733 --> 00:05:47,466
которая имеет специальные вырезы для операции И

64
00:05:47,733 --> 00:05:52,133
и также перемещается в вертикальном направлении.

65
00:05:54,166 --> 00:05:58,000
Затем три листа укладываются друг на друга

66
00:05:58,233 --> 00:06:01,700
и соединяются друг с другом двумя переключающими контактами.

67
00:06:02,566 --> 00:06:06,200
Мы достигаем того же эффекта на разнесенном чертеже,

68
00:06:06,466 --> 00:06:10,166
используя горизонтально соединенные штифты.

69
00:06:10,766 --> 00:06:16,033
Чего все еще не хватает, так это механизма запуска схемы И.

70
00:06:16,600 --> 00:06:20,400
Для этого Конрад Цузе предоставил делительную пластину,

71
00:06:20,766 --> 00:06:26,300
которая, как и выходная пластина, может двигаться вертикально.

72
00:06:27,733 --> 00:06:31,100
Теперь проверяем правильность работы схемы

73
00:06:31,466 --> 00:06:35,533
и начинаем с первой строки таблицы истинности.

74
00:06:35,866 --> 00:06:40,666
В качестве входных данных мы используем ноль для A и ноль для B.

75
00:06:41,433 --> 00:06:45,100
Затем срабатывает тактовый импульс.

76
00:06:45,600 --> 00:06:50,566
Поскольку верхнего соединения не происходит, выходной лист также остается

77
00:06:50,566 --> 00:06:55,233
в исходном положении, и результат равен нулю.

78
00:06:55,766 --> 00:06:58,666
Теперь вторая строка...

79
00:06:59,633 --> 00:07:02,766
ноль и...

80
00:07:02,766 --> 00:07:04,333
единица...

81
00:07:04,433 --> 00:07:08,500
снова равна нулю

82
00:07:09,066 --> 00:07:13,466
, потому что верхняя связь снова не активирована.

83
00:07:14,433 --> 00:07:17,366
Теперь третья строка...

84
00:07:18,133 --> 00:07:24,133
Мы устанавливаем вход A равным единице, а B равным нулю.

85
00:07:24,966 --> 00:07:29,533
На этот раз тактовый импульс перемещает соединительную пластину.

86
00:07:29,966 --> 00:07:37,933
Однако, поскольку нижняя связь не происходит, выходной лист снова остается нулевым.

87
00:07:38,933 --> 00:07:43,166
Наконец, мы проверяем последнюю строку таблицы

88
00:07:43,600 --> 00:07:46,833
и устанавливаем входные данные A

89
00:07:48,500 --> 00:07:53,200
и B равными единице.

90
00:07:54,400 --> 00:08:02,300
Выходная пластина теперь смещается по часам, потому что

91
00:08:02,466 --> 00:08:08,900
имеет место как верхняя, так и нижняя муфта, и результат один.

92
00:08:10,600 --> 00:08:14,433
Таким образом, мы полностью проверили вентиль И

93
00:08:14,433 --> 00:08:18,433
, а затем смотрим на вентиль XOR.

94
00:08:18,833 --> 00:08:22,033
Для этого нам сначала нужно растворить логический элемент И,

95
00:08:22,233 --> 00:08:25,833
затем удалить соединительную пластину и,

96
00:08:25,833 --> 00:08:29,233
наконец, заменить ее двумя новыми пластинами

97
00:08:29,333 --> 00:08:33,100
, имеющими правильные вырезы для операции исключающее ИЛИ.

98
00:08:33,866 --> 00:08:40,066
Затем листы, наконец, снова соединяются штифтами переключателя, и вуаля...

99
00:08:40,200 --> 00:08:44,366
Наши эксклюзивные ворота операционной полностью собраны!

100
00:08:44,633 --> 00:08:48,200
Таблица истинности на этот раз выглядит так:

101
00:08:48,400 --> 00:08:54,600
если A и B равны, результат равен нулю.

102
00:08:54,600 --> 00:09:00,200
Если A и B не равны, операция XOR приводит к единице.

103
00:09:00,766 --> 00:09:03,600
Итак, вернемся к тестированию нашей схемы...

104
00:09:04,566 --> 00:09:08,266
Zero XOR Zero

105
00:09:08,700 --> 00:09:13,600
равно нулю!

106
00:09:17,100 --> 00:09:22,600
Ноль XOR единица

107
00:09:22,800 --> 00:09:26,400
равен единице.

108
00:09:27,300 --> 00:09:30,000
Теперь вы видели, что правый

109
00:09:30,000 --> 00:09:35,166
лист берет на себя сцепление, если А и В не равны.

110
00:09:38,566 --> 00:09:40,366
И это продолжается с...

111
00:09:40,366 --> 00:09:45,133
Один ноль XOR также

112
00:09:46,466 --> 00:09:47,600
равен

113
00:09:48,400 --> 00:09:51,033
единице.

114
00:09:51,033 --> 00:09:54,900
На этот раз левый лист берет на себя муфту.

115
00:09:55,733 --> 00:09:57,666
Все, что остается, это...

116
00:10:00,100 --> 00:10:05,533
Один XOR Один,

117
00:10:06,466 --> 00:10:09,966
который затем снова равен нулю.

118
00:10:10,800 --> 00:10:15,200
Теперь, когда мы реализовали логические операции AND и XOR,

119
00:10:15,466 --> 00:10:18,033
нам все еще не хватает простого переключателя.

120
00:10:18,466 --> 00:10:23,066
Он состоит из таймера и выходного лотка,

121
00:10:23,066 --> 00:10:28,533
оба из которых могут перемещаться горизонтально, и входного лотка,

122
00:10:28,533 --> 00:10:31,200
который выровнен по вертикали.

123
00:10:31,966 --> 00:10:36,533
Все три листа, конечно же, снова соединены переключающим контактом.

124
00:10:36,900 --> 00:10:43,466
В неактивном состоянии тактовый и выходной листы не связаны и импульс

125
00:10:43,466 --> 00:10:46,200
соответственно не переключается.

126
00:10:46,700 --> 00:10:49,466
Если переключатель активен,

127
00:10:50,033 --> 00:10:53,800
тактовый импульс передается вперед.

128
00:10:55,066 --> 00:10:58,366
С тремя описанными переключающими элементами у нас теперь есть все

129
00:10:58,366 --> 00:11:02,733
ингредиенты для аддитивной модели Хюнфельда.

130
00:11:02,733 --> 00:11:06,900
Далее мы шаг за шагом объясним, как устроен сумматор.

131
00:11:07,200 --> 00:11:13,466
Мы начинаем для этого в правом верхнем углу, где установлены логические элементы AND и XOR.

132
00:11:13,466 --> 00:11:19,400
Схема имеет два входа, а именно A1 и B1.

133
00:11:20,100 --> 00:11:28,600
Тогда есть два выхода, а именно R для результата суммы и U для переноса.

134
00:11:29,100 --> 00:11:33,200
Ворота активируются через первую пластину часов.

135
00:11:34,066 --> 00:11:40,033
И вот снова таблица истинности для схемы, которая в наши дни, кстати,

136
00:11:40,300 --> 00:11:43,000
называется полусумматор.

137
00:11:43,000 --> 00:11:48,133
Таким образом, этот компонент имеет два входа,

138
00:11:48,133 --> 00:11:51,033
а именно первое слагаемое A1

139
00:11:51,633 --> 00:11:54,733
и второе слагаемое B1.

140
00:11:55,333 --> 00:11:58,166
Тогда у нас есть два выхода,

141
00:11:58,166 --> 00:12:04,300
а именно сумма R и перенос U.

142
00:12:05,000 --> 00:12:08,366
Затем мы тестируем схему...

143
00:12:09,633 --> 00:12:12,200
ноль плюс ноль

144
00:12:12,700 --> 00:12:14,533
равно

145
00:12:16,800 --> 00:12:18,466
нулю!

146
00:12:18,600 --> 00:12:21,466
И перенос тоже нулевой.

147
00:12:22,133 --> 00:12:27,266
И И, и XOR не пропускают тактовый импульс.

148
00:12:29,000 --> 00:12:35,000
Во второй строке мы устанавливаем A1 равным нулю

149
00:12:35,466 --> 00:12:39,600
, а B1 равным единице.

150
00:12:40,300 --> 00:12:43,600
Это активирует вентиль XOR

151
00:12:44,000 --> 00:12:45,700
, и часы

152
00:12:45,700 --> 00:12:47,833
переключаются.

153
00:12:48,966 --> 00:12:52,933
Результат равен единице, а перенос

154
00:12:52,933 --> 00:12:55,633
остается равным нулю.

155
00:12:56,000 --> 00:12:57,900
То же самое относится к

156
00:12:59,366 --> 00:13:03,433
единице плюс ноль.

157
00:13:04,466 --> 00:13:06,700
Давайте посмотрим на

158
00:13:06,900 --> 00:13:10,366
последнюю строку таблицы истинности.

159
00:13:12,600 --> 00:13:15,333
На этот раз единица и

160
00:13:16,666 --> 00:13:18,333
единица

161
00:13:18,400 --> 00:13:21,333
активируют логический элемент И,

162
00:13:22,000 --> 00:13:24,266
и часы вызывают

163
00:13:24,466 --> 00:13:27,366
установку переноса.

164
00:13:28,966 --> 00:13:31,733
Сумма остается равной нулю.

165
00:13:36,733 --> 00:13:39,733
Итак, наш полусумматор работает.

166
00:13:40,200 --> 00:13:44,333
Он может правильно сложить двоичную цифру и определить перенос.

167
00:13:44,700 --> 00:13:48,766
Схемы уже хватило бы на последнюю цифру двоичного числа.

168
00:13:49,200 --> 00:13:55,300
Однако с предпоследней позиции необходимо еще учитывать перенос предыдущего дополнения.

169
00:13:55,733 --> 00:14:00,633
Для этого нам нужно немного расширить схему.

170
00:14:01,500 --> 00:14:04,633
Здесь снова логическое представление нашего полусумматора

171
00:14:04,633 --> 00:14:09,266
со слагаемыми A1 и B1

172
00:14:09,466 --> 00:14:14,433
и, как результат, суммой R и переносом U.

173
00:14:14,766 --> 00:14:22,166
В дополнение к A1 и B1 мы теперь получаем перенос U1 в качестве третьего входа,

174
00:14:22,733 --> 00:14:26,466
который получается из сложения предыдущая цифра.

175
00:14:26,700 --> 00:14:32,566
Затем новая сумма R1 и новый перенос U2

176
00:14:32,566 --> 00:14:38,400
должны быть рассчитаны из A1, B1 и U1 с использованием дополнительной логики

177
00:14:38,600 --> 00:14:43,333
. Таблица истинности теперь имеет еще один столбец.

178
00:14:43,633 --> 00:14:48,266
Кстати, сейчас мы занимаемся созданием так называемого полного сумматора

179
00:14:48,633 --> 00:14:54,300
с аббревиатурой FA от «Полный сумматор».

180
00:14:55,366 --> 00:14:58,200
Прежде всего, давайте посмотрим

181
00:14:58,200 --> 00:15:03,700
на вычисление суммы R1, которая становится единицей всякий раз, когда

182
00:15:03,700 --> 00:15:09,033
установлен ровно один вход A1, B1 или U1, или все три вместе.

183
00:15:09,300 --> 00:15:12,833
Такого поведения можно добиться с помощью другого элемента XOR,

184
00:15:13,200 --> 00:15:19,166
в который мы передаем перенос U1 и результат первой операции XOR.

185
00:15:19,166 --> 00:15:25,533
Верхний вентиль XOR переключается всякий раз, когда установлен либо A1, либо B1.

186
00:15:25,833 --> 00:15:34,300
Для U1, равного нулю, затем переключается второе исключающее ИЛИ, и конечным результатом является единица.

187
00:15:34,466 --> 00:15:39,900
Если A1 и B1 равны нулю, а U1 установлен,

188
00:15:40,200 --> 00:15:45,366
нижнее XOR также переключается, и результат снова равен единице.

189
00:15:46,300 --> 00:15:50,800
Теперь возникает вопрос, как информация из первого вентиля XOR

190
00:15:51,166 --> 00:15:53,966
может механически попасть во второй.

191
00:15:54,200 --> 00:15:58,000
В конце концов, импульс должен как-то проявиться.

192
00:15:58,466 --> 00:16:03,566
Этот подвиг достигается за счет второй прихватки и переключателя.

193
00:16:04,100 --> 00:16:07,000
Давайте продемонстрируем, как это работает в принципе

194
00:16:07,000 --> 00:16:11,533
, и возьмем третью строку таблицы истинности:

195
00:16:11,533 --> 00:16:18,600
Ноль плюс один активирует вентиль XOR.

196
00:16:19,600 --> 00:16:23,266
Затем срабатывает первый удар,

197
00:16:23,633 --> 00:16:26,233
и переключатель щелкает.

198
00:16:27,000 --> 00:16:30,633
В цикле 2 информация

199
00:16:30,633 --> 00:16:37,800
из первого XOR затем перемещается во второй XOR через переключатель и активирует его.

200
00:16:38,866 --> 00:16:41,400
Импульс потек из-за угла.

201
00:16:41,766 --> 00:16:49,233
Теперь нам нужен третий бар, чтобы запустить второй вентиль XOR

202
00:16:49,466 --> 00:16:53,300
и вычислить правильный результат.

203
00:16:54,000 --> 00:16:59,900
Теперь, когда мы можем вычислить результат R1, перенос U2 по-прежнему отсутствует.

204
00:17:00,533 --> 00:17:08,933
Это возвращает единицу, если установлены и A1, и B1, что затем активирует логический элемент И.

205
00:17:09,833 --> 00:17:12,466
В этом случае информация снова

206
00:17:12,466 --> 00:17:17,133
выталкивается за угол с помощью переключателя из такта 2.

207
00:17:17,833 --> 00:17:22,933
Случаи, когда установлены либо A1, либо B1,

208
00:17:23,400 --> 00:17:26,266
что активирует верхнее исключающее ИЛИ, по-прежнему отсутствуют.

209
00:17:26,700 --> 00:17:31,700
Кроме того, есть перенос U1 из предыдущей позиции.

210
00:17:32,433 --> 00:17:36,433
Переадресация переноса легко реализуется путем

211
00:17:36,733 --> 00:17:41,700
сдвига верхней информации XOR с U1 на U2 с помощью другого переключателя

212
00:17:41,700 --> 00:17:47,166
, который, конечно же, тактовая пластина 2 снова принимает на себя.

213
00:17:47,733 --> 00:17:52,700
Таким образом, наш полный сумматор готов и теперь может

214
00:17:52,700 --> 00:17:57,133
служить базовым элементом для теоретически любого числа разрядов в сумматоре.

215
00:17:58,500 --> 00:18:01,933
Модель Хюнфельда использует две двоичные цифры.

216
00:18:02,166 --> 00:18:07,633
Итак, давайте один раз скопируем наш полный сумматор и настроим метки.

217
00:18:08,500 --> 00:18:14,166
Затем соединяем две детали с помощью переходной пластины U2.

218
00:18:14,600 --> 00:18:19,200
И наш 2-битный сумматор имеет следующую таблицу истинности:

219
00:18:19,633 --> 00:18:23,433
Давайте сначала посчитаем пример без переноса.

220
00:18:23,733 --> 00:18:31,166
Как насчет два плюс один?

221
00:18:31,433 --> 00:18:34,766
Вход запускает два вентиля XOR.

222
00:18:35,000 --> 00:18:39,966
Затем бар 1 активирует четыре переключателя.

223
00:18:40,333 --> 00:18:44,566
Бар 2 выдвигает информацию XOR за угол

224
00:18:44,733 --> 00:18:48,233
и активирует нижние вентили XOR.

225
00:18:48,600 --> 00:18:52,533
Наконец, третья полоса оценивает результат,

226
00:18:52,800 --> 00:18:59,033
который, как и ожидалось, равен 001 в двоичном формате или трем в десятичном.

227
00:18:59,633 --> 00:19:03,200
В этом случае цепочка для переноски еще не использовалась.

228
00:19:03,600 --> 00:19:09,866
Итак, наконец, мы делаем пример с самого начала с переносом, так что...

229
00:19:11,333 --> 00:19:12,433
три

230
00:19:13,100 --> 00:19:14,100
плюс

231
00:19:15,233 --> 00:19:16,533
один.

232
00:19:16,766 --> 00:19:23,000
Вход активирует первый XOR и второй логический элемент AND.

233
00:19:23,600 --> 00:19:29,333
Такт 1 запускает переключатели цепочки переноса,

234
00:19:29,333 --> 00:19:35,733
а также переключатель для расчета переноса U2 со вторым местом.

235
00:19:36,000 --> 00:19:40,700
Такт 2 смещает перенос на U3.

236
00:19:40,866 --> 00:19:45,700
И бар 3 не имеет дальнейшего эффекта.

237
00:19:45,933 --> 00:19:53,233
Результатом является правильное двоичное число 100 или десятичное число четыре.

238
00:19:54,300 --> 00:19:55,200
Сделанный!

239
00:19:55,966 --> 00:20:00,000
Конрад Цузе действительно разработал довольно гениальную вещь:

240
00:20:00,533 --> 00:20:04,966
первый в мире двоичный сумматор!

241
00:20:05,700 --> 00:20:07,033
Его коллеги

242
00:20:07,033 --> 00:20:08,766
Вильгельм Шикард и...

243
00:20:08,766 --> 00:20:10,766
Готфрид Вильгельм Лейбниц

244
00:20:10,766 --> 00:20:17,666
, несомненно, бурно аплодировали бы!

